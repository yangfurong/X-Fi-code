#!/usr/bin/env python3

import sys, os
import re
import subprocess, shlex
import argparse
import logging

logging.basicConfig(level=logging.INFO)

"""
This program reads texts generated by iw scan/apscanner from stdin piped with stdout of scanner
and outputs BSS information filtered by ssids to stdout and files.
"""

parser = argparse.ArgumentParser()
parser.add_argument("ssids", nargs="*", default=[], help="please input a ssid list seperated by spaces, e.g. \"FreeWifi_secure\" \"SFR Mobile WiFi\"")
parser.add_argument("-d", "--dir", required=True, help="outputs are also written into files under this folder")
parser.add_argument("--file_size", type=int, default=20000, help="the max number of BSS information item that a single file can store. default=20000")
args = parser.parse_args()

logging.info("[scanner] ssid filter: {}".format(args.ssids))

##check args
assert os.path.exists(args.dir)

def main():
    bss_info =  []
    store = False
    log_file = None
    log_file_sz = 0
    log_file_nb = 0
    cur_line = input()

    while cur_line:
        re_match = re.match(r"^.*:\s*BSS\s*([a-z0-9]{2}:){5}[a-z0-9]{2}.*$", cur_line)
        if re_match:
            if len(bss_info) and store:
                try:
                    if log_file_sz == 0:
                        log_file = open(os.path.join(args.dir, "scan_#{}.log".format(log_file_nb)), "w")
                        log_file_nb += 1
                    elif log_file_sz >= args.file_size:
                        log_file.flush()
                        log_file.close()
                        log_file_sz = 0
                        log_file = open(os.path.join(args.dir, "scan_#{}.log".format(log_file_nb)), "w")
                        log_file_nb += 1
                    log_file_sz += 1
                    for row in bss_info:
                        log_file.write(row)
                        log_file.write("\n")
                        #print(row)
                except Exception as e:
                    raise e

            bss_info = []
            store = False
        else:
            re_match = re.match(r"^.*:\s*SSID:\s*(.*)\s*$", cur_line)
            if re_match:
                ssid = re_match.group(1)
                if ssid in args.ssids:
                    store = True

        bss_info.append(cur_line)
        cur_line = input()

    if len(bss_info) and store:
        try:
            if log_file_sz == 0:
                log_file = open(os.path.join(args.dir, "scan_#{}.log".format(log_file_nb)), "w")
                log_file_nb += 1
            elif log_file_sz >= args.file_size:
                log_file.flush()
                log_file.close()
                log_file_sz = 0
                log_file = open(os.path.join(args.dir, "scan_#{}.log".format(log_file_nb)), "w")
                log_file_nb += 1
            log_file_sz += 1
            for row in bss_info:
                log_file.write(row)
                log_file.write("\n")
                #print(row)
        except Exception as e:
            raise e

    if log_file:
        log_file.flush()
        log_file.close()

if __name__ == "__main__":
    main()
